{"version":3,"sources":["components/GridSettings.js","components/PageSettings.js","components/Grid.js","App.js","index.js"],"names":["GridSettings","state","setState","useState","linkState","setLinkState","subdivideState","setSubdivideState","gridinfo","collapse","display","secondary_division","updateState","newState","linkStateClass","multi","subdivideStateClass","className","value","cell_width","onChange","e","target","cell_height","type","onClick","preventDefault","cell_color","checked","style","secondary_row_number","secondary_column_number","secondary_color","PageSettings","pageinfo","multi_grid","style_portrait","portrait","style_landscape","page_size","page_margin_vertical","page_margin_horizontal","multi_grid_number","Grid","props","socket","downloadLink","primary_number_of_cells","updatePagePropState","bind","sendPageProps","this","on","data","updatedState","console","log","emit","visible","href","download","React","Component","socketIO","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffe9c0ae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst GridSettings = ({ state, setState }) => {\n  const [linkState, setLinkState] = useState(false);\n  const [subdivideState, setSubdivideState] = useState(false);\n\n  const gridinfo = state;\n\n  const collapse = { display: !gridinfo.secondary_division ? \"none\" : \"\" };\n\n  const updateState = newState => {\n    setState({ gridinfo: newState });\n  };\n\n  const multiVisibleState = { display: gridinfo.multi ? \"none\" : \"\" };\n  const linkStateClass = linkState ? \"button is-info\" : \"button\";\n  const subdivideStateClass = subdivideState ? \"button is-info\" : \"button\";\n\n  return (\n    <div>\n      <h2 className=\"title\">Grid Info</h2>\n      <div className=\"columns\">\n        <div className=\"column is-10 is-offset-1\">\n          <div className=\"columns\">\n            <div className=\"column is-three-fifths\">\n              <div className=\"field\">\n                <label className=\"label\">Cell Size</label>\n                <div className=\"field-body\">\n                  <p className=\"control has-icons-left\">\n                    <input\n                      className=\"input\"\n                      value={gridinfo.cell_width}\n                      onChange={e => {\n                        if (linkState) {\n                          updateState({\n                            ...gridinfo,\n                            cell_width: e.target.value,\n                            cell_height: e.target.value\n                          });\n                        } else {\n                          updateState({\n                            ...gridinfo,\n                            cell_width: e.target.value\n                          });\n                        }\n                      }}\n                      type=\"number\"\n                    />\n                    <span className=\"icon is-small is-left\">\n                      <i className=\"fas fa-arrows-alt-h\" />\n                    </span>\n                  </p>\n\n                  <p className=\"control\">\n                    <button\n                      className={linkStateClass}\n                      onClick={e => {\n                        e.preventDefault();\n                        setLinkState(!linkState);\n                        updateState({\n                          ...gridinfo,\n                          cell_height: gridinfo.cell_width\n                        })\n                      }}\n                    >\n                      <span className=\"icon is-normal\">\n                        <i className=\"fas fa-link\" />\n                      </span>\n                    </button>\n                  </p>\n\n                  <p className=\"control has-icons-left\">\n                    <input\n                      type=\"number\"\n                      className=\"input\"\n                      value={gridinfo.cell_height}\n                      onChange={e =>\n                        updateState({\n                          ...gridinfo,\n                          cell_height: e.target.value\n                        })\n                      }\n                    />\n                    <span className=\"icon is-small is-left\">\n                      <i className=\"fas fa-arrows-alt-v\" />\n                    </span>\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"field column is-two-fifths\">\n              <label className=\"label\">Grid Color</label>\n              <input\n                className=\"input\"\n                value={gridinfo.cell_color}\n                onChange={e =>\n                  updateState({\n                    ...gridinfo,\n                    cell_color: e.target.value\n                  })\n                }\n                type=\"color\"\n              />\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                value={gridinfo.secondary_division}\n                onChange={e =>\n                  updateState({\n                    ...gridinfo,\n                    secondary_division: e.target.checked\n                  })\n                }\n              />\n              Subdivide\n            </label>\n          </div>\n\n          <div style={collapse}>\n            <div className=\"columns\">\n              <div className=\"column is-three-fifths\">\n                <div className=\"field\">\n                  <label className=\"label\">Number of Subdivisions</label>\n                  <div className=\"field-body is-grouped has-addons\">\n                    <div className=\"control has-icons-left\">\n                      <input\n                        className=\"input\"\n                        type=\"number\"\n                        value={gridinfo.secondary_row_number}\n                        onChange={e => {\n                          if (subdivideState) {\n                            updateState({\n                              ...gridinfo,\n                              secondary_column_number: e.target.value,\n                              secondary_row_number: e.target.value\n                            });\n                          } else {\n                            updateState({\n                              ...gridinfo,\n                              secondary_row_number: e.target.value\n                            });\n                          }\n                        }}\n                      />\n                      <span className=\"icon is-small is-left\">\n                        <i className=\"fa fa-arrows-alt-h\" />\n                      </span>\n                    </div>\n                    <div className=\"control\">\n                      <button\n                        className={subdivideStateClass}\n                        onClick={e => {\n                          e.preventDefault();\n                          setSubdivideState(!subdivideState);\n                          updateState({\n                            ...gridinfo,\n                            secondary_column_number: gridinfo.secondary_row_number\n                          })\n                        }}\n                      >\n                        <span className=\"icon is-normal\">\n                          <i className=\"fas fa-link\" />\n                        </span>\n                      </button>\n                    </div>\n                    <div className=\"control has-icons-left\">\n                      <input\n                        className=\"input\"\n                        type=\"number\"\n                        value={gridinfo.secondary_column_number}\n                        onChange={e =>\n                          updateState({\n                            ...gridinfo,\n                            secondary_column_number: e.target.value\n                          })\n                        }\n                      />\n                      <span className=\"icon is-small is-left\">\n                        <i className=\"fa fa-arrows-alt-v\" />\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"field column is-two-fifths\">\n                <label className=\"label\">Subdivision Color</label>\n                <input\n                  className=\"input\"\n                  type=\"color\"\n                  value={gridinfo.secondary_color}\n                  onChange={e =>\n                    updateState({\n                      ...gridinfo,\n                      secondary_color: e.target.value\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GridSettings;\n","import React from \"react\";\n\nconst PageSettings = ({ state, setState }) => {\n  const pageinfo = state;\n\n  const collapse = { display: !pageinfo.multi_grid ? \"none\" : \"\" };\n\n  const updateState = newState => {\n    setState({ pageinfo: newState });\n  };\n\n  const style_portrait = pageinfo.portrait\n    ? \"button is-info is-selected is-\"\n    : \"button\";\n  const style_landscape = !pageinfo.portrait\n    ? \"button is-info is-selected\"\n    : \"button\";\n\n  return (\n    <div>\n      <h2 className=\"title\">Page Info</h2>\n      <div className=\"columns\">\n        <div className=\"column is-10 is-offset-1\">\n          <div className=\"columns\">\n            <div className=\"column is-half\">\n              <div className=\"field\">\n                <label className=\"label\">Page Size</label>\n                <div className=\"control is-expanded\">\n                  <div className=\"select is-fullwidth\">\n                    <select\n                      value={pageinfo.page_size}\n                      onChange={e => {\n                        updateState({ ...pageinfo, page_size: e.target.value });\n                      }}\n                    >\n                      <option value=\"A4\">A4</option>\n                      <option value=\"A5\">A5</option>\n                      <option value=\"Letter\">Letter</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"column is-half\">\n              <div className=\"field is-full-width\">\n                <label className=\"label\">Orientation</label>\n                <div className=\"buttons has-addons is-grouped is-centered\">\n                  <button\n                    className={style_portrait}\n                    onClick={e => {\n                      e.preventDefault();\n                      updateState({ ...pageinfo, portrait: true });\n                    }}\n                  >\n                    Portrait\n                  </button>\n                  <button\n                    className={style_landscape}\n                    onClick={e => {\n                      e.preventDefault();\n                      updateState({ ...pageinfo, portrait: false });\n                    }}\n                  >\n                    Landscape\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"columns\">\n            <div className=\"column is-half\">\n              <div className=\"field\">\n                <label className=\"label\">Vertical Margin</label>\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={pageinfo.page_margin_vertical}\n                  onChange={e => {\n                    updateState({\n                      ...pageinfo,\n                      page_margin_vertical: e.target.value\n                    });\n                  }}\n                />\n              </div>\n            </div>\n            <div className=\"column is-half\">\n              <div className=\"field\">\n                <label className=\"label\">Horizontal Margin</label>\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={pageinfo.page_margin_horizontal}\n                  onChange={e => {\n                    updateState({\n                      ...pageinfo,\n                      page_margin_horizontal: e.target.value\n                    });\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  checked={pageinfo.multi_grid}\n                  onChange={e => {\n                    updateState({ ...pageinfo, multi_grid: e.target.checked });\n                  }}\n                />\n                Multiple grids per page\n              </label>\n            </div>\n          </div>\n\n          <div style={collapse}>\n            <div className=\"columns\">\n              <div className=\"field column is-half\">\n                <label className=\"label\">Number of Grids on Page</label>\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={pageinfo.multi_grid_number}\n                  onChange={e => {\n                    updateState({\n                      ...pageinfo,\n                      multi_grid_number: e.target.value\n                    });\n                  }}\n                />\n              </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageSettings;\n","import React from \"react\";\nimport GridSettings from './GridSettings'\nimport PageSettings from './PageSettings'\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.socket = this.props.socket\n    \n    this.state = {\n      downloadLink: '',\n      pageinfo: {\n        page_size: 'A4',\n        portrait: true,\n        page_margin_vertical: 20,\n        page_margin_horizontal: 15,\n        multi_grid: false,\n        multi_grid_number: 0,\n      },\n      gridinfo: {\n        cell_width: 10,\n        cell_height: 10,\n        cell_color: \"#54c384\",\n        primary_number_of_cells: [-1, -1], // -1 unlimited\n        secondary_division: false,\n        secondary_row_number: 2,\n        secondary_column_number: 2,\n        secondary_color: \"#a341b7\"\n      }\n    };\n    this.updatePagePropState = this.updatePagePropState.bind(this)\n    this.sendPageProps = this.sendPageProps.bind(this)\n  }\n\n  componentDidMount(){\n    this.socket.on('pdf_generation_finished', data => this.setState({downloadLink: data}))\n  }\n\n  updatePagePropState(updatedState) {\n    this.setState(updatedState)\n  }\n\n  sendPageProps(e) {\n    e.preventDefault()\n    console.log(this.state)\n    this.socket.emit('pdf_generation_request', {pageinfo: this.state.pageinfo, gridinfo: this.state.gridinfo})\n  }\n\n\n  render(){\n    const {pageinfo, gridinfo} = this.state\n    const visible = {display: this.state.downloadLink === '' ? \"none\": \"\"}\n    return (\n      <div className=\"columns\">\n        <div className=\"column is-three-fifths is-offset-one-fifth\">\n          <form>\n            <PageSettings state={pageinfo} setState={this.updatePagePropState} />\n            <GridSettings state={gridinfo} setState={this.updatePagePropState} />\n          </form>\n          <div className=\"buttons is-centered\">\n          <button className=\"button is-primary\"\n            onClick={this.sendPageProps}>\n            Generate\n          </button>\n          <a \n            href={this.state.downloadLink}\n            download=\"graphpaper.pdf\">\n            <button\n              style={visible}\n              type=\"submit\"\n              className=\"button is-success\"\n            >\n              Download\n            </button>\n          </a>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Grid\n","import React from \"react\";\nimport socketIO from 'socket.io-client'\nimport Grid from './components/Grid'\nconst socket = socketIO('/')\n\nclass App extends React.Component{\n  componentDidMount() {\n    console.log('app component')\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Grid socket={socket} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}